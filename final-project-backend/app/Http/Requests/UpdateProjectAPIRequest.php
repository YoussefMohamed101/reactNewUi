<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use App\Rules\ProductOwnerValidationRule;
use App\Rules\ProductManagerValidationRule;
class UpdateProjectAPIRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array|string>
     */
    public function rules(): array
    {
        return [
            //
            'project_title' => 'sometimes|required|string',
            'project_type' => 'sometimes|required|string',
            'project_description' => 'sometimes|required|string',
            'project_start' => 'sometimes|required|date',
            'project_end' => 'sometimes|required|date|after:project_start',
            'ProductOwner_id' => ['sometimes','required', 'exists:managers,id', new ProductOwnerValidationRule],
            'ProductManager_id' => ['sometimes','required', 'exists:managers,id', new ProductManagerValidationRule],
            'client_id' => 'sometimes|required|exists:clients,id',
        ];
    }
    ## add new function failed validation
    public  function  failedValidation(Validator $validator)
    {
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw  new HttpResponseException(
            response()->json([
            'success'=>false,
            "message"=>"validation project errors",
            "data"=> $validator->errors()
            ],
            400

        ));
    }
}
